class Node:
    def __init__(self, data):
        # Инициализируем узел с данными и указателем на следующий элемент
        # data: значение, хранящееся в узле
        # next: ссылка на следующий узел, изначально None
        self.data = data  # Данные узла
        self.next = None  # Указатель на следующий узел, по умолчанию None


class Queue:
    def __init__(self):
        # Инициализация пустой очереди
        # head: указывает на первый элемент (голову) очереди
        # tail: указывает на последний элемент (хвост) очереди
        self.head = None  # Голова очереди (первый элемент)
        self.tail = None  # Хвост очереди (последний элемент)

    def enqueue(self, data):
        """Добавление элемента в конец очереди"""
        # Создаём новый узел с переданными данными
        new_node = Node(data)
        # Проверяем, пуста ли очередь
        if self.tail is None:
            # Если очередь пуста, голова и хвост указывают на новый узел
            self.head = new_node
        else:
            # Если очередь не пуста, текущий хвост указывает на новый узел
            self.tail.next = new_node
        # Обновляем указатель хвоста на новый узел
        self.tail = new_node

    def dequeue(self):
        """Удаление элемента из начала очереди"""
        # Проверяем, пуста ли очередь
        if self.head is None:
            # Если очередь пуста, возвращаем None
            return None
        # Сохраняем ссылку на текущую голову
        temp = self.head
        # Перемещаем голову на следующий узел
        self.head = self.head.next
        # Если после удаления очередь пуста, сбрасываем хвост
        if self.head is None:
            self.tail = None
        # Возвращаем данные удалённого узла
        return temp.data

    def peek(self):
        """Возвращает значение первого элемента без его удаления"""
        # Проверяем, пуста ли очередь
        if self.head is None:
            # Если очередь пуста, возвращаем None
            return None
        # Возвращаем данные текущей головы (первого элемента)
        return self.head.data

    def is_empty(self):
        """Проверяет, пуста ли очередь"""
        # Возвращаем True, если голова указывает на None (очередь пуста)
        return self.head is None


"""
Класс Node:

Используется для создания узлов, из которых состоит очередь.
Каждый узел хранит значение (data) и указатель на следующий узел (next).

Класс Queue:

Реализует очередь с помощью связанных узлов.
Имеет два указателя: на голову (head) и хвост (tail) очереди.

Метод enqueue:
Добавляет новый элемент в конец очереди.
Если очередь пуста, новый элемент становится и головой, и хвостом.
Если очередь не пуста, новый узел добавляется после текущего хвоста.

Метод dequeue:
Удаляет первый элемент (голову) очереди.
Если очередь становится пустой после удаления, указатель на хвост сбрасывается.
Возвращает значение удалённого элемента.

Метод peek:
Позволяет узнать значение первого элемента в очереди без его удаления.
Возвращает None, если очередь пуста.

Метод is_empty:
Проверяет, пуста ли очередь, на основании указателя head.
Возвращает True, если очередь пуста, и False в противном случае.
"""

"""Требуется повторение!!!
Частично усвоенная тема."""