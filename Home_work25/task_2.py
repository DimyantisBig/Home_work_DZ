# Определение класса узла (Node), который представляет один элемент стека
class Node:
    def __init__(self, data):
        # Инициализация данных узла
        self.data = data  # Поле для хранения данных, которые будут записаны в узел
        self.next = None  # Ссылка на следующий узел, изначально равна None

# Определение класса стека (Stack), который представляет структуру данных типа "стек" LIFO
class Stack:
    def __init__(self):
        # Инициализация головы стека
        self.head = None  # Указывает на вершину стека, изначально стек пуст (голова = None)

    # Метод для проверки, пуст ли стек
    def is_empty(self):
        # Если голова стека равна None, значит стек пуст
        return self.head is None

    # Метод для добавления элемента в стек
    def push(self, data):
        # Создание нового узла с переданными данными
        new_node = Node(data)
        # Установка ссылки нового узла на текущую голову стека
        new_node.next = self.head
        # Обновление головы стека на новый узел
        self.head = new_node

    # Метод для удаления и возврата элемента с вершины стека
    def pop(self):
        # Проверка, пуст ли стек
        if self.is_empty():
            return None  # Если стек пуст, вернуть None
        # Сохранение текущей головы стека (узла, который будет удален)
        temp = self.head
        # Обновление головы стека на следующий элемент
        self.head = self.head.next
        # Возврат данных из удаленного узла
        return temp.data

    # Метод для просмотра данных на вершине стека без удаления
    def peek(self):
        # Проверка, пуст ли стек
        if self.is_empty():
            return None  # Если стек пуст, вернуть None
        # Возврат данных из узла, находящегося на вершине стека
        return self.head.data

"""
Класс Node:

init(self, data):
Создает новый узел с заданными данными.
data: значение, которое будет храниться в узле.
next: ссылка на следующий узел (изначально None, так как узел может быть последним).

Класс Stack:

init(self):
Инициализирует пустой стек.
head: указывает на первый элемент стека. Изначально None, так как стек пуст.

is_empty(self):
Проверяет, пустой ли стек.
Возвращает True, если head равен None, иначе False.

push(self, data):
Добавляет новый элемент в начало стека.
Создает новый узел new_node с заданными данными.
Устанавливает next у нового узла равным текущему head (т.е. вставляет новый узел в начало).
Обновляет head, чтобы он указывал на новый узел.

pop(self):
Удаляет и возвращает верхний элемент стека.
Если стек пуст, возвращает None.
Сохраняет ссылку на текущий head в переменной temp.
Обновляет head, чтобы он указывал на следующий узел.
Возвращает данные из удаленного узла.

peek(self):
Возвращает значение верхнего элемента стека, не удаляя его.
Если стек пуст, возвращает None.

Как это работает?
Представь, что ты складываешь книги на стол. Каждая книга – это узел. 
Когда ты кладешь новую книгу, она оказывается сверху остальных (push). 
Когда ты берешь книгу, ты берешь верхнюю (pop). 
Стек на основе односвязного списка работает аналогично, только вместо книг у нас узлы, связанные ссылками.LIFO
"""