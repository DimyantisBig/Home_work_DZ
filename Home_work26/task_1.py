# O(n^2)
def binary_search(arr, low, high, x):
  if high >= low:
    mid = (high + low) // 2
    if arr[mid] == x:
      return mid
    elif arr[mid] > x:
      return binary_search(arr, low, mid - 1, x)
    else:
      return binary_search(arr, mid + 1, high, x)
  else:
    return -1

# O(log n)
def fibonacci_search(arr, x):
  # Находим наибольшее число Фибоначчи, меньше длины массива
  fib2 = 0
  fib1 = 1
  fib = fib2 + fib1
  n = len(arr)
  while fib < n:
    fib2 = fib1
    fib1 = fib
    fib = fib2 + fib1

  # Маркируем элементы массива, которые нужно сравнить
  offset = -1

  # Пока есть элементы для сравнения
  while fib > 1:
    i = min(offset+fib2, n-1)

    # Если x больше значения в индексе i
    if arr[i] < x:
      fib = fib1
      fib1 = fib2
      fib2 = fib - fib1
      offset = i
    # Если x меньше, то уменьшаем область поиска
    elif arr[i] > x:
      fib = fib2
      fib1 = fib1 - fib2
    else:
      return i

  # Если элемент не найден, то fib равен 1
  if fib1 and arr[offset+1] == x:
    return offset+1

  return -1

"""
Двоичный поиск:
Принцип:
Делим отсортированный массив пополам.
Сравниваем средний элемент с искомым.
Если они равны, поиск окончен.
Если искомый элемент меньше среднего, продолжаем поиск в левой половине.
Иначе, продолжаем поиск в правой половине.
Повторяем процесс, пока не найдем элемент или не исчерпаем все возможности. 
"""
#--------------------------------
"""
Фибоначчи поиск:
Принцип:
Используем последовательность Фибоначчи для определения границ поиска.
Находим наибольшее число Фибоначчи, которое меньше длины массива.
Сравниваем элемент с индексом, рассчитанным по числам Фибоначчи.
В зависимости от результата сравнения сужаем границы поиска.
Почему Фибоначчи?
Числа Фибоначчи: каждое число является суммой двух предыдущих. Это позволяет эффективно делить массив на части.
"""
#---------------------------------
"""
Сравнение алгоритмов
Двоичный поиск: Обычно быстрее, особенно для больших массивов.
Фибоначчи поиск: Может быть эффективнее в некоторых специфических случаях, например, когда доступ к элементам массива ограничен.
"""
#----------------------------------
"""
Сложная тема!Частично не понятно.Иначе вынос мозга...
Повторить на 100%!!!
"""