def merge_sort(arr):
    """
    Сортировка слиянием.

    Args:
        arr: Список для сортировки.

    Returns:
        Отсортированный список.
    """

    if len(arr) <= 1:
        return arr  # Базовый случай: массив с одним или нулем элементов уже отсортирован

    mid = len(arr) // 2  # Находим середину массива

    # Рекурсивно сортируем левую и правую половины
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])

    # Слияние двух отсортированных половин
    return merge(left, right)

def merge(left, right):
    """
    Слияние двух отсортированных списков.

    Args:
        left: Левый отсортированный список.
        right: Правый отсортированный список.

    Returns:
        Отсортированный список, полученный слиянием left и right.
    """

    result = [] # Создаем пустой список result для хранения результата слияния.
    i = j = 0 # Используем два индекса i и j для прохода по левому и правому спискам соответственно.

    while i < len(left) and j < len(right): # Сравниваем элементы из left и right и добавляем меньший элемент в result.
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # Добавляем оставшиеся элементы (если есть)
    result.extend(left[i:])
    result.extend(right[j:])

    return result

"""
Как работает алгоритм:
Массив разбивается на все более мелкие части до тех пор, пока каждая часть не будет состоять
из одного элемента (отсортированный массив).
Затем эти части сливаются попарно, сравнивая элементы и формируя новый отсортированный массив.
Этот процесс продолжается до тех пор, пока не будет получен один полностью отсортированный массив.

Ключевое преимущество: 
Сортировка слиянием гарантирует время выполнения O(n log n) в худшем случае, что делает ее очень 
эффективным алгоритмом для больших массивов данных.
"""

"""
Важно!
Сложная тема.
К повторению!Частично не понятно.
"""